Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 537 (user_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years =

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no 
	
	
	SQL code used to arrive at answer:
	
SELECT * 
FROM user

WHERE name IS NULL
OR review_count IS NULL

OR yelping_since IS NULL

OR useful IS NULL

OR funny IS NULL

OR cool IS NULL

OR fans IS NULL

OR average_stars IS NULL
OR compliment_hot IS NULL

OR compliment_more IS NULL

OR compliment_profile IS NULL

OR compliment_cute IS NULL

OR compliment_list IS NULL

OR compliment_note IS NULL

OR compliment_plain IS NULL

OR compliment_cool IS NULL

OR compliment_funny IS NULL

OR compliment_writer IS NULL

OR compliment_photos IS NULL;

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.71
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.65
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: .01
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.94
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.3
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT city, SUM(review_count) AS total_reviews
	
FROM business

	GROUP BY city

	ORDER BY total_reviews DESC;
	
	
	Copy and Paste the Result Below:
	
+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, review_count

FROM business

WHERE city = 'Avon'

GROUP BY stars

ORDER BY stars ASC;


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+--------------+
| stars | review_count |
+-------+--------------+
|   1.5 |           10 |
|   2.5 |            3 |
|   3.5 |           50 |
|   4.0 |           17 |
|   4.5 |           31 |
|   5.0 |            3 |
+-------+--------------+ 

ii. Beachwood


SQL code used to arrive at answer:

SELECT stars, review_count

FROM business

WHERE city = 'Beachwood'

GROUP BY stars

ORDER BY stars ASC;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------+--------------+
| stars | review_count |
+-------+--------------+
|   2.0 |            8 |
|   2.5 |            3 |
|   3.0 |            3 |
|   3.5 |            3 |
|   4.0 |           69 |
|   4.5 |            3 |
|   5.0 |            4 |
+-------+--------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT id, name, review_count

	FROM user
	
ORDER BY review_count DESC 
LIMIT 3;
		
	Copy and Paste the Result Below:
		
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+


8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	Yes but very poor correlated and only to a relatively low number of reviews are posted.

DESC
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

ASC
+---------+--------------+------+
| name    | review_count | fans |
+---------+--------------+------+
| Joe     |            2 |    0 |
| Jeb     |           57 |    0 |
| Jed     |            8 |    0 |
| Rae     |            2 |    0 |
| Ryan    |            2 |    0 |
| Joe     |            1 |    0 |
| Scott   |            7 |    0 |
| John    |            3 |    0 |
| Ron     |            9 |    0 |
| Bryan   |            5 |    0 |
| Patti   |            2 |    0 |
| Gary    |           23 |    0 |
| Kristin |           28 |    0 |
| Cynthia |            4 |    0 |
| Mrme    |            2 |    0 |
| Austin  |            2 |    0 |
| Mesut   |           25 |    0 |
| Lissa   |            3 |    0 |
| Tara    |            3 |    0 |
| Lyndsey |            1 |    0 |
| Annie   |           11 |    0 |
| Daniece |            2 |    0 |
| Alex    |            7 |    0 |
| Mary    |            2 |    0 |
| Garen   |            3 |    0 |
+---------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
+------+------+
| love | hate |
+------+------+
| 1780 |  232 |
+------+------+
	
	SQL code used to arrive at answer:

SELECT SUM(CASE WHEN text LIKE '%love%' THEN 1 ELSE 0 END) AS 'love',

SUM(CASE WHEN text LIKE '%hate%' THEN 1 ELSE 0 END) AS 'hate'

FROM review;
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name, fans
	
FROM user

	ORDER BY fans DESC LIMIT 10;
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
	
	--Find how many times a user is listed as useful or funny as a percent of 		their number of fans.  
	SELECT name, fans, useful/fans * 100, funny/fans * 100
	
FROM user

	ORDER BY fans DESC LIMIT 10;
	
	Copy and Paste the Result Below:
	
+-----------+------+-------------------+------------------+
| name      | fans | useful/fans * 100 | funny/fans * 100 |
+-----------+------+-------------------+------------------+
| Amy       |  503 |               600 |              500 |
| Mimi      |  497 |                 0 |                0 |
| Harald    |  311 |             39500 |            39300 |
| Gerald    |  253 |              6900 |              900 |
| Christine |  173 |              2700 |             3800 |
| Lisa      |  159 |                 0 |                0 |
| Cat       |  133 |               700 |              500 |
| William   |  126 |              7400 |             7400 |
| Fran      |  124 |              7900 |             6100 |
| Lissa     |  120 |               300 |              100 |
+-----------+------+-------------------+------------------+
	
	Please explain your findings and interpretation of the results:
	
	The values reflect how many times a average fan would mark a user as funny of useful. It seems that fans often list users as funny or useful many times so given this criteria we can say that 8 of the top ten users are listed as useful or funny by on average more than once by each fan and therefore there is a strong relationship.
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

The ones rated 4-5 stars were open later and not in the morning. The ones that were rated 2-3 stars were open more hours including mornings.

-- Use inner join because we want only restaurants in Toronto.

-- Toronto and Restaurants were selected because this was an option

-- which there was more data on.

SELECT name, city, category, stars, hours

FROM business 

INNER JOIN category ON business.id = category.business_id

INNER JOIN hours ON business.id = hours.business_id

WHERE (city = 'Toronto' AND category = 'Restaurants')

ORDER BY stars DESC;


ii. Do the two groups you chose to analyze have a different number of reviews?

The higher star restaurants have an average review count of 41 and the lower star restaurants have an average review count of 17. 

-- Use inner join because we want only restaurants  in Toronto.

-- Toronto and Restaurants were selected because this was an option

-- which there was more data on.

SELECT name, city, stars, AVG(review_count)

FROM business 

INNER JOIN category ON business.id = category.business_id

WHERE (city = 'Toronto' AND category = 'Restaurants')

GROUP BY (stars >= 4)

ORDER BY stars DESC;        
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

The lower rated restaurants seem to be located in the core of downtown. The higher star groups are further from the center. Two of the five restaurants in the low star group are in the neighborhood called 'Downtown Core'. 

SQL code used for analysis:

SELECT name, neighborhood, city, stars 
FROM business
INNER JOIN category ON business.id = category.business_id
WHERE (city = 'Toronto' AND category = 'Restaurants')
ORDER BY stars DESC;
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

At approximately 8 AM in Toronto there are 4x more restaurants open than closed from the data available.         
         
ii. Difference 2:
The two restaurants that are closed have a significantly lower average review count of 7 compared to 36, the average review count the ones that are open.         
         
         
SQL code used for analysis:

SELECT name, neighborhood, review_count, stars, is_open 
FROM business
INNER JOIN category ON business.id = category.business_id
WHERE (city = 'Toronto' AND category = 'Restaurants')
ORDER BY is_open DESC;	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
I will be performing a sentiment analysis on businesses in Las Vegas to determine the most popular businesses based on the affirmation words in reviews such as 'love', 'like' or'best'.           
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

First I need to know what are the most common affirmation words in Yelp reviews to look for? To answer this question I did some research and found an interesting study that found to most common words in highly rated Yelp reviews.
https://rstudio-pubs-static.s3.amazonaws.com/117743_53a6a1da3c724e7b8d608c3df7e40fb6.html#/3
The ten most common high rating words are: good, great, amazing, like, love, best, friendly, well, pretty, nice.

Next I need access to a large database of Yelp reviews from the Las Vegas area which is provided by the Coursera course. I can then run an SQL query to pull interesting details about the venue such as name, neighborhood, number of reviews, stars rating and also the total number of the top ten affirmation words in the reviews for each venue by including an inner join between the business and reviews tables.                           
                  
iii. Output of your finished dataset:

+-------------------------------------+-----------------+-----------+--------------+-------+-----------+
| name                                | neighborhood    | city      | review_count | stars | aff_words |
+-------------------------------------+-----------------+-----------+--------------+-------+-----------+
| The Buffet                          | The Strip       | Las Vegas |         3873 |   3.5 |        10 |
| Diablo's Cantina                    | The Strip       | Las Vegas |         1084 |   3.0 |         7 |
| Delmonico Steakhouse                | The Strip       | Las Vegas |         1389 |   4.0 |         4 |
| The Cheesecake Factory              | The Strip       | Las Vegas |          539 |   4.0 |         4 |
| Rainforest Café                     | The Strip       | Las Vegas |          444 |   2.5 |         4 |
| TENDER Steak & Seafood              | The Strip       | Las Vegas |          385 |   3.5 |         3 |
| Dal Toro Ristorante                 | The Strip       | Las Vegas |          324 |   2.5 |         3 |
| Yonaka Modern Japanese              |                 | Las Vegas |          864 |   4.5 |         3 |
| Michael Mina                        | The Strip       | Las Vegas |          574 |   4.0 |         2 |
| Fresh Buffet                        | Eastside        | Las Vegas |          160 |   2.5 |         2 |
| 99 Ranch Market                     | Chinatown       | Las Vegas |          136 |   3.0 |         2 |
| Kinh Do                             | Chinatown       | Las Vegas |          706 |   4.0 |         2 |
| Art of Flavors                      | Downtown        | Las Vegas |          132 |   4.5 |         2 |
| Mizuya                              | The Strip       | Las Vegas |          115 |   3.0 |         2 |
| Regal Cinemas Red Rock 16 & IMAX    | South Summerlin | Las Vegas |          217 |   4.0 |         2 |
| Full House BBQ                      | Southeast       | Las Vegas |          264 |   4.0 |         2 |
| Luv It Frozen Custard               | Downtown        | Las Vegas |          630 |   4.0 |         2 |
| Hong Kong Garden Seafood & BBQ Cafe | Chinatown       | Las Vegas |          147 |   3.0 |         2 |
| Heart Bar                           | The Strip       | Las Vegas |          108 |   3.5 |         2 |
| Lazy Dog Restaurant & Bar           | South Summerlin | Las Vegas |          786 |   4.0 |         2 |
| China One - West Charleston         | Summerlin       | Las Vegas |          101 |   3.5 |         2 |
| Tofu Hut                            | Chinatown       | Las Vegas |          607 |   3.5 |         2 |
| Gondola Ride at the Venetian        | The Strip       | Las Vegas |          235 |   3.5 |         2 |
| 808 Sushi                           | Southwest       | Las Vegas |          435 |   3.5 |         2 |
| Big Wong Restaurant                 | Chinatown       | Las Vegas |          768 |   4.0 |         2 |
+-------------------------------------+-----------------+-----------+--------------+-------+-----------+
(Output limit exceeded, 25 of 132 total rows shown)         
         
iv. Provide the SQL code you used to create your final dataset:

/* Select some interesting info about the venues */
SELECT name, neighborhood, city, review_count, business.stars, 


/* Add up the occurance of affirmation words in the reviews from each venue */
SUM(CASE WHEN (review.text LIKE '%love%' OR review.text LIKE '%like%' OR review.text LIKE '%best%' OR review.text LIKE '%good%' OR review.text LIKE '%great%' OR review.text LIKE '%amazing%' OR review.text LIKE '%friendly%' OR review.text LIKE '%well%' OR review.text LIKE '%pretty%' OR review.text LIKE '%nice%') THEN 1 ELSE 0 END) AS aff_words



/* Inner join on review table because we only want the reviews from the venues located located in Las Vegas */
FROM business

INNER JOIN review ON business.id = review.business_id

WHERE (city = 'Las Vegas')
GROUP BY business.id

ORDER BY aff_words DESC;